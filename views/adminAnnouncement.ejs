<%- include('include/header') %>
<%- include('include/adminnavbar') %>

<body class="bg-gray-100 h-screen overflow-hidden">
    <style>
        [x-cloak] { display: none !important; }
    </style>

    <div x-data="mainContent">
        <div class="ml-64 mt-16 p-6 h-screen overflow-hidden">
        <div class="flex flex-col items-center">
                <div class="w-4/4 bg-white shadow-lg rounded-lg p-6">
                <div class="text-xl font-semibold mb-4 text-center">Announcement List</div>

                <div class="mb-4">
                    <input type="text" class="border border-gray-300 w-full p-2 rounded" placeholder="Search by Announcement ID or Name" @input="search = $event.target.value; console.log('Search input value (updated): ', search)">
                </div>

                <div class="overflow-x-auto">
                    <table class="w-full border-collapse border border-gray-300">
                        <thead>
                            <tr class="bg-gray-200">
                                <th class="border border-gray-300 px-4 py-2">#</th>
                                <th class="border border-gray-300 px-4 py-2">Announcement ID</th>
                                <th class="border border-gray-300 px-4 py-2">Title</th>
                                <th class="border border-gray-300 px-4 py-2">Content</th>
                                <th class="border border-gray-300 px-4 py-2">Image</th>
                                <th class="border border-gray-300 px-4 py-2">Date</th>
                                <th class="border border-gray-300 px-4 py-2">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <template x-for="(announcement, index) in filteredAnnouncements" :key="announcement._id">
                                    <tr>
                                    <td class="border border-gray-300 px-4 py-2" x-text="index + 1"></td>
                                    <td class="border border-gray-300 px-4 py-2 font-mono" x-text="announcement.announcementId"></td>
                                    <td class="border border-gray-300 px-4 py-2" x-text="announcement.title"></td>
                                    <td class="border border-gray-300 px-4 py-2" x-text="announcement.content"></td>
                                        <td class="border border-gray-300 px-4 py-2 text-center">
                                        <template x-if="announcement.image">
                                            <img :src="announcement.image" alt="Announcement Image" style="max-width: 80px; max-height: 60px; border-radius: 4px;" />
                                        </template>
                                        <template x-if="!announcement.image">
                                                <span class="text-gray-400">No image</span>
                                        </template>
                                        </td>
                                    <td class="border border-gray-300 px-4 py-2" x-text="new Date(announcement.date).toLocaleDateString()"></td>
                                        <td class="border border-gray-300 px-4 py-2 text-center">
                                        <button @click="openEditModal(announcement)" class="hover:opacity-75">
                                                <img src="/assets/images/edit.png" class="w-5 h-5">
                                            </button>
                                        <button @click="showDeleteModal = true; deleteAnnouncementId = announcement._id">
                                                <img src="/assets/images/delete.png" class="w-5 h-5">
                                            </button>
                                        </td>
                                    </tr>
                            </template>
                            <tr x-show="filteredAnnouncements.length === 0">
                                <td colspan="7" class="text-center border border-gray-300 px-4 py-2">No announcements found.</td>
                                </tr>
                        </tbody>
                    </table>
                </div>

                <div class="mt-6 flex justify-center">
                    <button type="button" class="w-32 bg-blue-500 text-white py-2 rounded-lg shadow-md hover:bg-blue-600 transition"
                            @click="openAddModal">
                        Add Announcement
                    </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add Announcement Modal -->
        <template x-if="showModal && modalType === 'add'" x-cloak>
            <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
                <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
                    <form @submit.prevent="
                        const formData = new FormData($event.target);
                        fetch('/adminannouncement', {
                            method: 'POST',
                            headers: {
                                'X-CSRF-Token': '<%= csrfToken %>',
                                'Accept': 'application/json'
                            },
                            body: formData
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            window.location.reload();
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while adding the announcement');
                        })">
                        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                        <h2 class="text-lg font-semibold text-center mb-4">Add Announcement</h2>
                        
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Title</label>
                            <input type="text" name="title" placeholder="Enter title" 
                                class="w-full p-2 border rounded focus:ring-2 focus:ring-blue-400" required>
                        </div>

                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Content</label>
                            <textarea name="content" placeholder="Enter content" 
                                class="w-full p-2 border rounded focus:ring-2 focus:ring-blue-400" rows="4" required></textarea>
                        </div>

                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Image</label>
                            <input type="file" name="image" accept="image/*" 
                                class="w-full p-2 border rounded focus:ring-2 focus:ring-blue-400">
                            <p class="text-sm text-gray-500 mt-1">Max file size: 5MB. Supported formats: JPG, PNG, GIF</p>
                        </div>

                        <div class="flex justify-end gap-2 mt-4">
                            <button type="button" @click="showModal = false"
                                class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition">Cancel</button>
                            <button type="submit"
                                class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition">Post</button>
                        </div>
                    </form>
                </div>
            </div>
        </template>

        <!-- Edit Announcement Modal -->
        <template x-if="showModal && modalType === 'edit'" x-cloak>
            <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
                <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
                    <form @submit.prevent="
                        const formData = new FormData($event.target);
                        fetch('/adminannouncement/edit/' + announcement._id, {
                            method: 'POST',
                            headers: {
                                'X-CSRF-Token': '<%= csrfToken %>',
                                'Accept': 'application/json'
                            },
                            body: formData
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            window.location.reload();
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while updating the announcement');
                        })">
                        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                        <h2 class="text-lg font-semibold text-center mb-4">Edit Announcement</h2>
                        
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Title</label>
                            <input type="text" name="title" x-model="announcement.title" class="w-full p-2 border rounded" required>
                        </div>

                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Content</label>
                            <textarea name="content" x-model="announcement.content" class="w-full p-2 border rounded" rows="4" required></textarea>
                        </div>

                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Image</label>
                            <input type="file" name="image" accept="image/*" @change="handleImageUpload"
                                class="w-full p-2 border rounded focus:ring-2 focus:ring-blue-400">
                            <p class="text-sm text-gray-500 mt-1">Max file size: 5MB. Supported formats: JPG, PNG, GIF</p>
                            <template x-if="announcement.image">
                                <div class="mt-2">
                                    <p class="text-sm text-gray-600">Current image:</p>
                                    <img :src="announcement.image" class="mt-1 max-h-32 rounded">
                                </div>
                            </template>
                        </div>

                        <div class="flex justify-end gap-2 mt-4">
                            <button type="button" @click="showModal = false"
                                class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition">Cancel</button>
                            <button type="submit"
                                class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </template>

        <!-- Delete Confirmation Modal -->
        <template x-if="showDeleteModal" x-cloak>
            <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
                <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
                    <h2 class="text-xl font-semibold mb-4">Delete Announcement</h2>
                    <p class="mb-4">Are you sure you want to delete this announcement?</p>
                    <div class="flex justify-end">
                        <button class="bg-gray-500 text-white px-4 py-2 rounded mr-2 hover:bg-gray-600 transition" @click="showDeleteModal = false">Cancel</button>
                        <form @submit.prevent="
                            fetch('/adminannouncement/delete/' + deleteAnnouncementId, {
                                method: 'POST',
                                headers: {
                                    'X-CSRF-Token': '<%= csrfToken %>',
                                    'Accept': 'application/json'
                                }
                            })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                window.location.reload();
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('An error occurred while deleting the announcement');
                            })">
                            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                            <button type="submit" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition">Delete</button>
                        </form>
                    </div>
                </div>
            </div>
        </template>
    </div>
</body>

<!-- New script tag to safely pass announcements data -->
<script id="raw-announcements-json" type="application/json">
    <%- JSON.stringify(announcements) %>
</script>

<%- include('include/footer') %>

<script>
document.addEventListener('alpine:init', () => {
    console.log('Alpine.js mainContent component initializing...');

    // Retrieve the stringified announcements data from the new script tag
    const rawAnnouncementsString = document.getElementById('raw-announcements-json').textContent;
    const parsedAnnouncements = JSON.parse(rawAnnouncementsString);
    console.log('Parsed announcements data:', parsedAnnouncements);

    Alpine.data('mainContent', () => ({
        showModal: false,
        modalType: '',
        pendingAnnouncementData: null,
        announcement: {
            _id: '',
            announcementId: '',
            title: '',
            content: '',
            image: null
        },
        showDeleteModal: false,
        deleteAnnouncementId: null,
        search: '',
        announcements: parsedAnnouncements,

        init() {
            this.$watch('showModal', value => {
                if (value) {
                    // When modal opens, populate the announcement data from pendingAnnouncementData
                    this.$nextTick(() => {
                        if (this.pendingAnnouncementData) {
                            const announcementData = this.pendingAnnouncementData;
                            this.announcement = {
                                _id: announcementData._id || '',
                                announcementId: announcementData.announcementId || '',
                                title: announcementData.title || '',
                                content: announcementData.content || '',
                                image: announcementData.image || null
                            };
                            console.log('Set announcement data for editing via $watch:', this.announcement);
                            this.pendingAnnouncementData = null; // Clear pending data
                        }
                    });
                } else {
                    this.resetForm();
                }
            });
        },

        openAddModal() {
            console.log('Opening add modal');
            this.modalType = 'add';
            this.resetForm();
            this.showModal = true;
        },

        openEditModal(announcementData) {
            console.log('Opening edit modal with data:', announcementData);
            this.modalType = 'edit';
            this.pendingAnnouncementData = announcementData;
            this.showModal = true;
        },

        resetForm() {
            this.announcement = {
                _id: '',
                announcementId: '',
                title: '',
                content: '',
                image: null
            };
        },

        handleImageUpload(event) {
            console.log('Handling image upload:', event.target.files[0]);
            const file = event.target.files[0];
            if (file) {
                // Create a temporary URL for the image preview
                this.announcement.image = URL.createObjectURL(file);
                console.log('Image preview URL created:', this.announcement.image);
            }
        },

        get filteredAnnouncements() {
            if (!this.search) return this.announcements;
            const searchLower = this.search.toLowerCase();
            return this.announcements.filter(announcement => 
                announcement.announcementId.toLowerCase().includes(searchLower) ||
                announcement.title.toLowerCase().includes(searchLower)
            );
        }
    }));
});
</script>
